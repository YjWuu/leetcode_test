1.前缀树
  例子:
  一个字符串类型的数组arr1，另一个字符串类型的数组arr2。arr2中有哪些字符，是arr1中出现的？请打印。arr2中有哪些字符，是作为arr1中某个字符串前缀出现的？请打印。arr2
  中有哪些字符，是作为arr1中某个字符串前缀出现的？请打印 arr2中出现次数最大的前缀。
  
  代码：
  public static class TrieNode {
    public int path;
    public int end;
    public TrieNode[] nexts;
    public TrieNode() {
      path = 0;
      end = 0;
      nexts = new TrieNode[26]; //26个字母，若有更多的字符，可以使用HashMap
    }
  }
  
  public static class Trie {
    private TrieNode root;
    public Trie() {
      root = new TrieNode();
    }
    //插入操作
    public void insert(String word) {
      if (word == null) {
        return;
      }
      char[] chs = word.toCharArray();
      TrieNode node = root;
      int index = 0;
      for (int i = 0; i < chs.length; i++) {
        index = chs[i] - 'a';
        if (node.nexts[index] == null) {
          node.nexts[index] = new TrieNode();
        }
        node = node.nexts[index];
        node.path++;
      }
      node.end++;
    } 
    //删除操作
    public void delete(String word) {
      if (search(word) != 0) {  //查询是否存在才可开始删除
        char[] chs = word.toCharArray();
        TrieNode node = root;
        int index = 0;
        for (int i = 0; i < chs.length; i++) {
          index = chs[i] - 'a';
          if (--node.nexts[index].path == 0) {
            node.nexts[index] = null;
            return;
          }
          node = node.nexts[index];
        }
        node.end--;
      } 
    }
    //查询一条字符串插入了几次
    public int search(String word) {
      if (word == null) {
        return 0;
      }
      char[] chs = word.toCharArray();
      TrieNode node = root;
      int index = 0;
      for (int i = 0; i < chs.length; i++) {
        index = chs[i] - 'a';
        if (node.nexts[index] == null) {
          return 0;
        }
        node = node.nexts[index];
      }
      return node.end;
    }
    //查询以该字符串为前缀的字符串的数量
    public int prefixNumber(String pre) {
      if (pre == null) {
        return 0;
      }
      char[] chs = pre.toCharArray();
      TrieNode node = root;
      int index = 0;
      for (int i = 0; i < chs.length; i++) {
        index = chs[i] - 'a';
        if (nodes.nexts[index] == null) {
          return 0;
        }
        node = node.nexts[index];
      }
      return node.path;
    }
  }
  
 
 
贪心算法的在笔试时的解题套路
  1)实现一个不依靠贪心策略的解法X，可以用最暴力的尝试
  2)脑补出贪心策略A、贪心策略B、贪心策略C...
  3)用解法X和对数器，去验证每一个贪心策略，用实验的方式得知哪个贪心策略正确
  4)不要去纠结贪心策略的证明
  
2.给定一个字符串类型的数组strs，找到一种拼接方式，使得把所有字符串拼起来之后形成的字符串具有最小的字典序。
  代码：
  public static class MyComparator implements Comparator<String> {
    @Override
    public int compare(String a, String b) {
      return (a + b).compareTo(b + a);
    }
  }
  
  public static String lowestString(String[] strs) {
    if (strs == null || strs.length == 0) {
      return "";
    }
    Arrays.sort(strs, newComparator());
    String res = "";
    for (int i = 0; i < str.length; i++) {
      res += strs[i];
    }
    return res;
  }



3.一群人想整分整块金条，怎么分最省铜板?
  例如,给定数组{10,20,30}，代表一共三个人，整块金条长度为10+20+30=60。金条要分成10,20,30三个部分。 如果先把长度60的金条分成10和50，花费60；
  再把长度50的金条分成20和30，花费50；一共花费110铜板。但是如果先把长度60的金条分成30和30，花费60；再把长度30金条分成10和20，花费30；一共花费90铜板。
  输入一个数组，返回分割的最小代价
  
  思路：哈夫曼树
  代码：
  public static int lessMoney(int[] arr) {
    PriorityQueue<Integer> pQ = new PriorityQueue<>();
    for (int i = 0; i < arr.length; i++) {
      pQ.add(arr[i]);
    } 
    int sum = 0;
    int cur = 0;
    while (pQ.size() > 1) {
      cur = pQ.poll() + pQ.poll();
      sum += cur;
      pQ.add(cur);
    } 
    return sum;
  }
  
  
4.一些项目要占用一个会议室宣讲，会议室不能同时容纳两个项目的宣讲。给你每一个项目开始的时间和结束的时间(给你一个数 组，里面是一个个具体的项目)，你来安排宣讲的日程，
  要求会议室进行的宣讲的场次最多。返回这个最多的宣讲场次
  
  代码：
  public static class Program {
    public int start;
    public int end;
    public Program(int start, int end) {
      this.start = start;
      this.end = end;
    } 
  }
  
  public static class ProgramComparator implements Comparator<Program> {
    @Override
    public int compare(Program o1, Program o2) {
      return o1.end - o2.end;
    } 
  }
  
  public static int bestArrange(Program[] programs, int start) {
    Arrays.sort(programs, new ProgramComparator());
    int result = 0;
    for (int i = 0; i < programs.length; i++) {
      if (start <= programs[i].start) {
        result++;
        start = programs[i].end;
      }
    }
    return result;  
  }
 
 
 
5.costs[i]表示i号项目的花费
  profits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)
  k表示你只能串行的最多做k个项目
  W表示你初始的资金
  说明：
  你每做完一个项目，马上获得的收益，可以支持你去做下一个项目。
  输出：
  你最后获得的最大钱数。
  
  代码：
  public static class Node {
    public int p; //利润
    public int c; //花费
    public Node(int p, int c) {
      this.p = p;
      this.c = c;
    }
  }
  
  public static class MinCostComparator implements Comparator<Node> {
    @Override
    public int compare(Node o1, Node o2) {
      return o1.c - o2.c; //按花费从小到大
    }
  }
  
  public static class MaxProfitComparator implements Comparator<Node> {
    @Override
    public int compare(Node o1, Node o2) {
      return o2.p - o1.p; //按利润从大到小
    }
  }
  
  public static int findMaximizedCapital(int k, int W, int[] Profits, int[] Capital) {
    Node[] nodes = new Node[Profits.length];
    for (int i = 0; i < Profits.length; i++) {
      nodes[i] = new Node(Profits[i], Capital[i]);
    }
    PriorityQueue<Node> minCostQ = new PriorityQueue<>(new MinCostCompatator());
    PriorityQueue<Node> maxProfitQ = new PriorityQueue<>(new MaxProfitComparator());
    for (int i = 0; i < nodes.length; i++) {
      minCostQ.add(nodes[i]);
    }
    for (int i = 0; i < k; i++) {
      while (!minCostQ.isEmpty() && minCostQ.peek().c <= W) {
        maxProfitQ.add(minCostQ.poll());
      }
      if (maxProfitQ.isEmpty()) {
        return W;
      }
      W += maxProfitQ.poll().p;
    }
    return W;
  }
  
6.一个数据流中，随时可以取得中位数(声明一个大根堆和一个小根堆)
  思路：
    1)判断当前cur <= 大根堆堆顶
    2)true，当前cur入大根堆
      false，当前cur入小根堆
    3)判断大小根堆size，如果两个堆的size大小相差等于2，size大的弹出到另一个堆中
   
  代码：
  public static class MaxHeapComparator implements Comparator<Integer> {
    @Override
    public int compare(Integer o1, Integer o2) {
      return o2 - o1;
    }
  } 
  
  public static class MinHeapComparator implements Comparator<Integer> {
    @Override
    public int compare(Integer o1, Integer o2) {
      return o1 - o2;
    } 
  }
  
  public static class MedianHolder {
    private PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(new MaxHeapComparator());
    private PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(new MinHeapComparator());
    private void modifyTwoHeapSize() {
      if (this.maxHeap.size() == this.minHeap.size() + 2) {
        this.minHeap.add(this.maxHeap.poll());
      }
      if (this.minHeap.size() == this.maxHeap.size() + 2) {
        this.maxHeap.add(this.minHeap.poll());
      }
    }
    public void addNumber(int num) {
      if (maxHeap.isEmpty() || num <= maxHeap.peek()) {
        maxHeap.add(num);
      } else {
        minHeap.add(num);
      }
      modifyTwoHeapSize();
    }
    public Integer getMedian() {
      int maxHeapSize = this.maxHeap.size();
      int minHeapSize = this.minHeap.size();
      if (maxHeapSize + minHeapSize == 0) {
        return null;
      }
      Integer maxHeapHead = this.maxHeap.peek();
      Integer minHeapHead = this.minHeap.peek();
      if (((maxHeapSize + minHeapSize) & 1) == 0) {
        return (maxHeapHead + minHeapHead) / 2;
      }
      return maxHeapSize > minHeapSize ? maxHeapSize : minHeapSize;
    } 
  } 
